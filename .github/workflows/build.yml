name: Build

on:
  workflow_call:
    inputs:
      fetch-submodules:
        type: boolean
        description: 'Whether to fetch submodules'
        required: false
        default: false
      node-version:
        type: string
        description: 'Node.js version'
        required: false
      lint:
        type: boolean
        description: 'Whether to run linting'
        required: false
        default: true
      test:
        type: boolean
        description: 'Whether to run tests'
        required: false
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        uses: cordiverse/workflows/.github/actions/setup@main
        with:
          fetch-submodules: ${{ inputs.fetch-submodules }}
          node-version: ${{ inputs.node-version }}

      - name: Build
        run: |
          (yarn build 2>&1) | tee build.log
          exit ${PIPESTATUS[0]}

      - name: Create Result Markdown
        if: ${{ success() || failure() }}
        run: |
          tee -a output.md <<EOF
          ### Build $([ ${{ job.status }} -eq 'success' ] && echo "✅" || echo "❌")

          <details>
            <summary>Details</summary>

            \`\`\`shell
            $(cat build.log)
            \`\`\`
          </details>
          EOF

      - name: Upload Build Log
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: output.md

  lint:
    runs-on: ubuntu-latest
    if: ${{ inputs.lint == 'true' }}
    steps:
      - name: Check Lint Script
        id: check-lint-script
        run: |
          if [ -f "package.json" ]; then
            if [ -z "$(jq -r '.scripts.lint' package.json)" ]; then
              echo "::warning::Lint script not found in package.json, skipping linting. If you want to suppress this warning, either add a lint script or set the option `lint` to `false` in the workflow file."
              echo "lint=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::package.json not found."
            exit 1
          fi

      - name: Setup
        if: steps.check-lint-script.outputs.lint != 'false'
        uses: cordiverse/workflows/.github/actions/setup@main
        with:
          node-version: ${{ inputs.node-version }}

      - name: Lint
        if: steps.check-lint-script.outputs.lint != 'false'
        run: |
          (yarn lint 2>&1) | tee lint.log
          exit ${PIPESTATUS[0]}

      - name: Create Result Markdown
        if: ${{ steps.check-lint-script.outputs.lint != 'false' && (success() || failure()) }}
        run: |
          tee -a output.md <<EOF
          ### Lint $([ ${{ job.status }} -eq 'success' ] && echo "✅" || echo "❌")

          <details>
            <summary>Details</summary>

            \`\`\`shell
            $(cat lint.log)
            \`\`\`
          </details>
          EOF

      - name: Upload Lint Log
        if: ${{ steps.check-lint-script.outputs.lint != 'false' && (success() || failure()) }}
        uses: actions/upload-artifact@v4
        with:
          name: lint-log
          path: output.md

  test:
    runs-on: ubuntu-latest
    if: ${{ inputs.test == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        version: [18.x, 20.x]
    steps:
      - name: Check Test Script
        id: check-test-script
        run: |
          if [ -f "package.json" ]; then
            if [ -z "$(jq -r '.scripts.test' package.json)" ]; then
              echo "::warning::Test script not found in package.json, skipping testing. If you want to suppress this warning, either add a test script or set the option `test` to `false` in the workflow file."
              echo "test=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::package.json not found."
            exit 1
          fi

      - name: Setup
        uses: cordiverse/workflows/.github/actions/setup@main
        with:
          node-version: ${{ inputs.node-version || matrix.version }}

      # Some projects may require a build step before testing.
      - name: Build
        if: steps.check-test-script.outputs.test != 'false'
        run: yarn build

      # Here we use the `tee` command to log the output to a file
      # but also display it in the console.
      - name: Test
        if: steps.check-test-script.outputs.test != 'false'
        run: |
          (yarn test 2>&1) | tee test.log
          exit ${PIPESTATUS[0]}

      - name: Create Result Markdown
        if: ${{ steps.check-test-script.outputs.test != 'false' && (success() || failure()) }}
        run: |
          tee -a output.md <<EOF
          ### Test $([ ${{ job.status }} -eq 'success' ] && echo "✅" || echo "❌")

          <details>
            <summary>Details</summary>

            \`\`\`shell
            $(cat test.log)
            \`\`\`
          </details>
          EOF

      - name: Upload Test Log
        if: ${{ steps.check-test-script.outputs.test != 'false' && (success() || failure()) }}
        uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: output.md

  comment:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: ${{ always() && github.event_name == 'pull_request' }}
    # Required permissions for the `comment` job.
    permissions:
      pull-requests: write
    steps:
      - name: Download All Logs
        uses: actions/download-artifact@v4
        with:
          path: log

      - name: Merge to Single Comment
        run: |
          mkdir output
          echo $'## PR Health \n\n' >> output/comment.md
          cat log/*/output.md >> output/comment.md
          echo ${{ github.event.number }} > output/issueNumber

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          comment-author: github-actions[bot]
          body-includes: '## PR Health'

      - name: Write comment id to file
        if: ${{ steps.fc.outputs.comment-id != 0 }} 
        run: echo ${{ steps.fc.outputs.comment-id }} >> output/commentId

      - name: Upload folder with number and markdown
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: output/
          retention-days: 2
